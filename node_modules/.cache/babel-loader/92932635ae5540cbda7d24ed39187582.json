{"ast":null,"code":"import{combineReducers}from'redux';import{ActionTypes}from'../actions';var lastCamp=0;var initialUser={username:\"\",//string\npassword:\"\",//string\nemail:\"\",//string\nid:0,//number\ntoken:\"\"//string\n};var storeUser=function storeUser(){var user=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialUser;var action=arguments.length>1?arguments[1]:undefined;if(action.type===ActionTypes.STORE_USER){return action.payload;}return user;};var storeCampaign=function storeCampaign(){var campaigns=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;if(action.type===ActionTypes.STORE_ALL_CAMPAIGNS){return action.payload;}return campaigns;};var loadCampaign=function loadCampaign(){var loadedCamp=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{campId:0,campName:\"\"};var action=arguments.length>1?arguments[1]:undefined;if(action.type===ActionTypes.LOAD_CAMPAIGN){return action.payload;}return loadedCamp;};var storeEmailList=function storeEmailList(){var emailList=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;if(action.type===ActionTypes.STORE_ALL_EMAIL_LIST){return action.payload;}return emailList;};var rootReducer=combineReducers({userData:storeUser,campaigns:storeCampaign,emailList:storeEmailList,loadedCampaign:loadCampaign});export default rootReducer;// const modeTypeReducer = (mode={activeSend:false, activeMail:false}, action) => {\n//     if (action.type === \"MODE_SELECTED\"){\n//         if (action.payload === \"Send\"){\n//             return {activeSend:true, activeMail:false}\n//         }else if (action.payload === \"Mail\"){\n//             return {activeSend:false, activeMail:true}\n//         }else\n//             return mode \n//     }\n//     return mode \n// };","map":{"version":3,"sources":["C:/Users/suvro/cessini-mail/src/reducers/index.js"],"names":["combineReducers","ActionTypes","lastCamp","initialUser","username","password","email","id","token","storeUser","user","action","type","STORE_USER","payload","storeCampaign","campaigns","STORE_ALL_CAMPAIGNS","loadCampaign","loadedCamp","campId","campName","LOAD_CAMPAIGN","storeEmailList","emailList","STORE_ALL_EMAIL_LIST","rootReducer","userData","loadedCampaign"],"mappings":"AAAA,OAASA,eAAT,KAAgC,OAAhC,CACA,OAASC,WAAT,KAA4B,YAA5B,CAEA,GAAIC,CAAAA,QAAQ,CAAG,CAAf,CAEA,GAAMC,CAAAA,WAAW,CAAG,CAChBC,QAAQ,CAAE,EADM,CACH;AACbC,QAAQ,CAAE,EAFM,CAEF;AACdC,KAAK,CAAE,EAHS,CAGF;AACdC,EAAE,CAAE,CAJY,CAIT;AACPC,KAAK,CAAE,EAAE;AALO,CAApB,CASA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAgC,IAA/BC,CAAAA,IAA+B,2DAAxBP,WAAwB,IAAXQ,CAAAA,MAAW,2CAC9C,GAAIA,MAAM,CAACC,IAAP,GAAgBX,WAAW,CAACY,UAAhC,CAA4C,CACxC,MAAOF,CAAAA,MAAM,CAACG,OAAd,CACH,CACD,MAAOJ,CAAAA,IAAP,CACH,CALD,CAOA,GAAMK,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAA4B,IAA3BC,CAAAA,SAA2B,2DAAf,EAAe,IAAXL,CAAAA,MAAW,2CAC9C,GAAIA,MAAM,CAACC,IAAP,GAAgBX,WAAW,CAACgB,mBAAhC,CAAqD,CACjD,MAAON,CAAAA,MAAM,CAACG,OAAd,CACH,CACD,MAAOE,CAAAA,SAAP,CACH,CALD,CAOA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAsD,IAArDC,CAAAA,UAAqD,2DAAxC,CAAEC,MAAM,CAAE,CAAV,CAAaC,QAAQ,CAAE,EAAvB,CAAwC,IAAXV,CAAAA,MAAW,2CACvE,GAAIA,MAAM,CAACC,IAAP,GAAgBX,WAAW,CAACqB,aAAhC,CAA+C,CAC3C,MAAOX,CAAAA,MAAM,CAACG,OAAd,CACH,CACD,MAAOK,CAAAA,UAAP,CACH,CALD,CAOA,GAAMI,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAA4B,IAA3BC,CAAAA,SAA2B,2DAAf,EAAe,IAAXb,CAAAA,MAAW,2CAC/C,GAAIA,MAAM,CAACC,IAAP,GAAgBX,WAAW,CAACwB,oBAAhC,CAAsD,CAClD,MAAOd,CAAAA,MAAM,CAACG,OAAd,CACH,CACD,MAAOU,CAAAA,SAAP,CACH,CALD,CAQA,GAAME,CAAAA,WAAW,CAAG1B,eAAe,CAAC,CAChC2B,QAAQ,CAAElB,SADsB,CAEhCO,SAAS,CAAED,aAFqB,CAGhCS,SAAS,CAAED,cAHqB,CAIhCK,cAAc,CAAEV,YAJgB,CAAD,CAAnC,CAQA,cAAeQ,CAAAA,WAAf,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { ActionTypes } from '../actions'\r\n\r\nlet lastCamp = 0\r\n\r\nconst initialUser = {\r\n    username: \"\",//string\r\n    password: \"\", //string\r\n    email: \"\",    //string\r\n    id: 0, //number\r\n    token: \"\"//string\r\n}\r\n\r\n\r\nconst storeUser = (user = initialUser, action) => {\r\n    if (action.type === ActionTypes.STORE_USER) {\r\n        return action.payload\r\n    }\r\n    return user\r\n};\r\n\r\nconst storeCampaign = (campaigns = [], action) => {\r\n    if (action.type === ActionTypes.STORE_ALL_CAMPAIGNS) {\r\n        return action.payload\r\n    }\r\n    return campaigns\r\n};\r\n\r\nconst loadCampaign = (loadedCamp = { campId: 0, campName: \"\" }, action) => {\r\n    if (action.type === ActionTypes.LOAD_CAMPAIGN) {\r\n        return action.payload\r\n    }\r\n    return loadedCamp\r\n};\r\n\r\nconst storeEmailList = (emailList = [], action) => {\r\n    if (action.type === ActionTypes.STORE_ALL_EMAIL_LIST) {\r\n        return action.payload\r\n    }\r\n    return emailList\r\n};\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    userData: storeUser,\r\n    campaigns: storeCampaign,\r\n    emailList: storeEmailList,\r\n    loadedCampaign: loadCampaign\r\n\r\n});\r\n\r\nexport default rootReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const modeTypeReducer = (mode={activeSend:false, activeMail:false}, action) => {\r\n//     if (action.type === \"MODE_SELECTED\"){\r\n//         if (action.payload === \"Send\"){\r\n//             return {activeSend:true, activeMail:false}\r\n//         }else if (action.payload === \"Mail\"){\r\n//             return {activeSend:false, activeMail:true}\r\n//         }else\r\n//             return mode \r\n//     }\r\n//     return mode \r\n// };\r\n"]},"metadata":{},"sourceType":"module"}