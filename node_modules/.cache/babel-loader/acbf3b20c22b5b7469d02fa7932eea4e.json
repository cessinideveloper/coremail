{"ast":null,"code":"import { call, take, put, delay, fork } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport store from '../store/store';\nimport { ActionTypes, storeAllEmailList, storeAllCampaigns } from '../actions';\n\nconst fetchEmaillist = () => {\n  return fetch(\"https://emailengine2020.herokuapp.com/newemail/\").then(re => re.json());\n};\n\nconst fetchCampaings = () => {\n  return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\").then(re => re.json());\n};\n\nconst postEmaillist = data => {\n  return axios.post(\"https://emailengine2020.herokuapp.com/newemail/\", data).then(re => re.data);\n};\n\nconst postCampaings = data => {\n  return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\", data).then(re => re.json());\n};\n\nexport function* watchUserSignIn() {\n  while (true) {\n    const {\n      payload\n    } = yield take(ActionTypes.GET_ALL_EMAIL_LIST);\n    yield fork(watchEmailListAdd);\n    yield fork(watchCampAdd);\n    yield fork(getCampaigns, payload);\n    yield call(getEmailList, payload);\n  }\n}\nexport function* watchEmailListAdd() {\n  while (true) {\n    console.log(\"watchEmailListAdd\");\n    const {\n      payload\n    } = yield take(ActionTypes.EMAIL_LIST_ADDED);\n    const postData = yield call(postEmaillist, payload);\n    console.log(postData);\n    yield call(getEmailList, store.getState().userData.id);\n  }\n}\nexport function* watchCampAdd() {\n  while (true) {\n    yield take(ActionTypes.CAMPAIGNS_ADDED);\n    yield call(getCampaigns, store.getState().userData.id);\n  }\n}\nexport function* getEmailList(payload) {\n  console.log(\"getEmailList\", payload);\n  const allEmailList = yield call(fetchEmaillist);\n  const filteredEmailList = allEmailList.filter(emailList => emailList.my_customer === payload);\n  yield put(storeAllEmailList(filteredEmailList));\n}\nexport function* getCampaigns(payload) {\n  delay(300);\n  const allCampaigns = yield call(fetchCampaings);\n  const filteredCampaigns = allCampaigns.filter(camp => camp.my_customer === payload);\n  yield put(storeAllCampaigns(filteredCampaigns));\n}","map":{"version":3,"sources":["C:/Users/suvro/cessini2/src/saga/index.js"],"names":["call","take","put","delay","fork","axios","store","ActionTypes","storeAllEmailList","storeAllCampaigns","fetchEmaillist","fetch","then","re","json","fetchCampaings","postEmaillist","data","post","postCampaings","watchUserSignIn","payload","GET_ALL_EMAIL_LIST","watchEmailListAdd","watchCampAdd","getCampaigns","getEmailList","console","log","EMAIL_LIST_ADDED","postData","getState","userData","id","CAMPAIGNS_ADDED","allEmailList","filteredEmailList","filter","emailList","my_customer","allCampaigns","filteredCampaigns","camp"],"mappings":"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","sourcesContent":["import {\r\n    call, take, put, delay, fork\r\n} from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport store from '../store/store'\r\nimport { ActionTypes, storeAllEmailList, storeAllCampaigns } from '../actions'\r\n\r\n\r\n\r\nconst fetchEmaillist = () => {\r\n    return fetch(\"https://emailengine2020.herokuapp.com/newemail/\").then(re => re.json())\r\n}\r\n\r\nconst fetchCampaings = () => {\r\n    return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\").then(re => re.json())\r\n}\r\n\r\nconst postEmaillist = (data) => {\r\n    return axios.post(\"https://emailengine2020.herokuapp.com/newemail/\", data).then(re => re.data)\r\n\r\n\r\n}\r\n\r\nconst postCampaings = (data) => {\r\n    return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\", data).then(re => re.json())\r\n}\r\n\r\nexport function* watchUserSignIn() {\r\n    while (true) {\r\n        const { payload } = yield take(ActionTypes.GET_ALL_EMAIL_LIST)\r\n        yield fork(watchEmailListAdd)\r\n        yield fork(watchCampAdd)\r\n        yield fork(getCampaigns, payload)\r\n        yield call(getEmailList, payload)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function* watchEmailListAdd() {\r\n    while (true) {\r\n        console.log(\"watchEmailListAdd\")\r\n        const { payload } = yield take(ActionTypes.EMAIL_LIST_ADDED)\r\n        const postData = yield call(postEmaillist, payload)\r\n        console.log(postData)\r\n        yield call(getEmailList, store.getState().userData.id)\r\n    }\r\n}\r\n\r\nexport function* watchCampAdd() {\r\n    while (true) {\r\n        yield take(ActionTypes.CAMPAIGNS_ADDED)\r\n        yield call(getCampaigns, store.getState().userData.id)\r\n    }\r\n}\r\n\r\nexport function* getEmailList(payload) {\r\n    console.log(\"getEmailList\", payload)\r\n    const allEmailList = yield call(fetchEmaillist)\r\n    const filteredEmailList = allEmailList.filter(emailList => emailList.my_customer === payload)\r\n    yield put(storeAllEmailList(filteredEmailList))\r\n}\r\n\r\nexport function* getCampaigns(payload) {\r\n    delay(300)\r\n    const allCampaigns = yield call(fetchCampaings)\r\n    const filteredCampaigns = allCampaigns.filter(camp => camp.my_customer === payload)\r\n    yield put(storeAllCampaigns(filteredCampaigns))\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}