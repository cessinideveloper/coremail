{"ast":null,"code":"import { call, take, put, delay, fork } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport store from '../store/store';\nimport { ActionTypes, storeAllEmailList, storeAllCampaigns } from '../actions';\n\nconst fetchEmaillist = () => {\n  return axios.get(\"https://emailengine2020.herokuapp.com/newemail/\", {\n    params: {\n      my_customer: 3\n    }\n  });\n};\n\nconst fetchCampaings = () => {\n  return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\").then(re => re.json());\n};\n\nconst postEmaillist = data => {\n  return axios.post(\"https://emailengine2020.herokuapp.com/newemail/\", data).then(re => re.json());\n};\n\nconst postCampaings = data => {\n  return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\", data).then(re => re.json());\n};\n\nexport function* watchUserSignIn() {\n  while (true) {\n    const {\n      payload\n    } = yield take(ActionTypes.GET_ALL_EMAIL_LIST);\n    yield fork(getCampaigns, payload);\n    yield call(getEmailList, payload);\n  }\n}\nexport function* watchCampAdd() {\n  while (true) {\n    const {\n      payload\n    } = yield take(ActionTypes.CAMPAIGNS_ADDED);\n    yield call(postEmaillist(payload));\n    yield fork(getCampaigns, store.getState().userData.id);\n    yield call(getEmailList, store.getState().userData.id);\n  }\n}\nexport function* watchEmailListAdd() {\n  while (true) {\n    const {\n      payload\n    } = yield take(ActionTypes.EMAIL_LIST_ADDED);\n    yield call(postEmaillist(payload));\n    yield fork(getCampaigns, store.getState().userData.id);\n    yield call(getEmailList, store.getState().userData.id);\n  }\n}\nexport function* getEmailList(payload) {\n  delay(300);\n  const allEmailList = yield call(fetchEmaillist); // const filteredEmailList = allEmailList.filter(emailList => emailList.my_customer === payload)\n\n  yield put(storeAllEmailList(allEmailList.data));\n}\nexport function* getCampaigns(payload) {\n  delay(300);\n  const allCampaigns = yield call(fetchCampaings);\n  const filteredCampaigns = allCampaigns.filter(camp => camp.my_customer === payload);\n  yield put(storeAllCampaigns(filteredCampaigns));\n}","map":{"version":3,"sources":["C:/Users/suvro/cessini2/src/saga/index.js"],"names":["call","take","put","delay","fork","axios","store","ActionTypes","storeAllEmailList","storeAllCampaigns","fetchEmaillist","get","params","my_customer","fetchCampaings","fetch","then","re","json","postEmaillist","data","post","postCampaings","watchUserSignIn","payload","GET_ALL_EMAIL_LIST","getCampaigns","getEmailList","watchCampAdd","CAMPAIGNS_ADDED","getState","userData","id","watchEmailListAdd","EMAIL_LIST_ADDED","allEmailList","allCampaigns","filteredCampaigns","filter","camp"],"mappings":"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","sourcesContent":["import {\r\n    call, take, put, delay, fork\r\n} from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport store from '../store/store'\r\nimport { ActionTypes, storeAllEmailList, storeAllCampaigns } from '../actions'\r\n\r\n\r\n\r\nconst fetchEmaillist = () => {\r\n    return axios.get(\"https://emailengine2020.herokuapp.com/newemail/\", { params: { my_customer: 3 } })\r\n}\r\n\r\nconst fetchCampaings = () => {\r\n    return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\").then(re => re.json())\r\n}\r\n\r\nconst postEmaillist = (data) => {\r\n    return axios.post(\"https://emailengine2020.herokuapp.com/newemail/\", data).then(re => re.json())\r\n}\r\n\r\nconst postCampaings = (data) => {\r\n    return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\", data).then(re => re.json())\r\n}\r\n\r\nexport function* watchUserSignIn() {\r\n    while (true) {\r\n        const { payload } = yield take(ActionTypes.GET_ALL_EMAIL_LIST)\r\n        yield fork(getCampaigns, payload)\r\n        yield call(getEmailList, payload)\r\n    }\r\n}\r\n\r\nexport function* watchCampAdd() {\r\n    while (true) {\r\n        const { payload } = yield take(ActionTypes.CAMPAIGNS_ADDED)\r\n        yield call(postEmaillist(payload))\r\n        yield fork(getCampaigns, store.getState().userData.id)\r\n        yield call(getEmailList, store.getState().userData.id)\r\n    }\r\n}\r\n\r\nexport function* watchEmailListAdd() {\r\n    while (true) {\r\n        const { payload } = yield take(ActionTypes.EMAIL_LIST_ADDED)\r\n        yield call(postEmaillist(payload))\r\n        yield fork(getCampaigns, store.getState().userData.id)\r\n        yield call(getEmailList, store.getState().userData.id)\r\n    }\r\n}\r\n\r\nexport function* getEmailList(payload) {\r\n    delay(300)\r\n    const allEmailList = yield call(fetchEmaillist)\r\n    // const filteredEmailList = allEmailList.filter(emailList => emailList.my_customer === payload)\r\n    yield put(storeAllEmailList(allEmailList.data))\r\n}\r\n\r\nexport function* getCampaigns(payload) {\r\n    delay(300)\r\n    const allCampaigns = yield call(fetchCampaings)\r\n    const filteredCampaigns = allCampaigns.filter(camp => camp.my_customer === payload)\r\n    yield put(storeAllCampaigns(filteredCampaigns))\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}