{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\suvro\\\\cessini-mail\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{forwardRef}from'react';import'react-dom';import'./buttons.css';import{useSpring,config,animated}from'react-spring';export var ButtonPopRightLite=forwardRef(function(_ref,ref){var breath=_ref.breath,grow=_ref.grow,children=_ref.children,expand=_ref.expand,title=_ref.title;var _useSpring=useSpring(function(){return{round1:\"50%\",round2:\"50%\",widthfont:\"90%\",xfront:\"5%\"};}),_useSpring2=_slicedToArray(_useSpring,2),round=_useSpring2[0],setRound=_useSpring2[1];var _useSpring3=useSpring(function(){return{widthfont:\"90%\",xfront:\"5%\"};}),_useSpring4=_slicedToArray(_useSpring3,2),rest=_useSpring4[0],setRest=_useSpring4[1];var _useSpring5=useSpring(function(){return{width:\"\".concat(breath,\"%\"),height:\"100%\"};}),_useSpring6=_slicedToArray(_useSpring5,2),pusher=_useSpring6[0],setPusher=_useSpring6[1];var _useSpring7=useSpring(function(){return{flexGrow:0,opacity:0};}),_useSpring8=_slicedToArray(_useSpring7,2),textDes=_useSpring8[0],setTextDes=_useSpring8[1];var pop=function pop(){setRest({widthfont:\"100%\",xfront:\"0%\"});setRound({round1:\"10%\",config:{duration:90}});setPusher({width:\"\".concat(breath*grow,\"%\")});setTextDes({flexGrow:grow-1,opacity:1});};var shrink=function shrink(){setRest({widthfont:\"90%\",xfront:\"5%\"});setRound({round1:\"50%\",config:{duration:800}});setPusher({width:\"\".concat(breath,\"%\")});setTextDes({flexGrow:0,opacity:0});};expand?pop():shrink();return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(animated.div,{className:\"liteWrapper\",style:pusher},/*#__PURE__*/React.createElement(animated.div,{className:\"ten\",style:{width:\"100%\",height:\"100%\"}},/*#__PURE__*/React.createElement(\"svg\",{width:\"100%\",height:\"100%\",className:\"tenSVG\"},/*#__PURE__*/React.createElement(\"defs\",null,/*#__PURE__*/React.createElement(\"filter\",{id:\"filter973\",width:\"10.278\",height:\"10.306\",x:\"-0.139\",y:\"-0.153\",colorInterpolationFilters:\"sRGB\"},/*#__PURE__*/React.createElement(\"feGaussianBlur\",{stdDeviation:\"10\"}))),/*#__PURE__*/React.createElement(animated.rect,{className:\"back\",style:{mixBlendMode:\"normal\"},width:\"100%\",height:\"100%\",fill:\"#000\",fillOpacity:\"0.214\",filter:\"url(#filter973)\",opacity:\"0.6\",rx:round.round1,ry:round.round2}),/*#__PURE__*/React.createElement(animated.rect,{className:\"font\",x:rest.xfront,y:\"5%\",width:rest.widthfont,height:\"90%\",fill:\"#fff\",rx:round.round1,ry:round.round2}))),/*#__PURE__*/React.createElement(\"div\",{className:\"infoWrapper\"},/*#__PURE__*/React.createElement(\"div\",{className:\"svgHolder\"},children),/*#__PURE__*/React.createElement(animated.div,{className:\"textHolder\",style:textDes},title)),/*#__PURE__*/React.createElement(animated.div,{className:\"eventDetector2\",ref:ref})));});// export const ButtonPopRight = forwardRef(({ grow, contract, children }, ref) => {\n//     const [textWidth, setTextWidth] = useSpring(() => ({ width: \"0vw\", opacity: 0, fontSize: `${grow.fontSize}vw` }))\n//     const [tranformWidth, setTranformWidth] = useSpring(() => ({ width: \"12.131\" }))\n//     const [tranformBackWidth, setTranformBackWidth] = useSpring(() => ({ width: \"13.173\" }))\n//     const [tranformX, setTranformX] = useSpring(() => ({ x: \"56.383\" }))\n//     const [tranformBackX, setTranformBackX] = useSpring(() => ({ x: \"55.877\" }))\n//     const [tranformWrapper, setTranformWrapper] = useSpring(() => ({ width: `${grow.radius}vw`, height: `${grow.radius}vw`, minWidth: grow.min, minHeight: grow.min }))\n//     const [tranformSVG, setTranformSVG] = useSpring(() => ({ width: \"100%\", height: \"100%\" }))\n//     const shrink = () => {\n//         setTranformX({ x: \"56.383\", delay: 50 })\n//         setTranformBackX({ x: \"55.877\", delay: 50 })\n//         setTranformWidth({ width: \"12.131\" })\n//         setTranformBackWidth({ width: \"13.173\" })\n//         setTranformSVG({ width: \"100%\", height: \"100%\", delay: 50 })\n//         setTranformWrapper({ width: `${grow.radius}vw`, height: `${grow.radius}vw`, minWidth: grow.min, minHeight: grow.min, delay: 300 })\n//         setTextWidth({ width: \"0vw\", opacity: 0, fontSize: `${grow.fontSize}vw` })\n//     }\n//     const expand = () => {\n//         setTranformX({ x: `${grow.transRect}`, delay: 30 })\n//         setTranformBackX({ x: `${grow.transRect}`, delay: 30 })\n//         setTranformWidth({ width: `${grow.front}`, delay: 30 })\n//         setTranformBackWidth({ width: `${grow.front}`, delay: 30 })\n//         setTranformSVG({ width: `${grow.SVG}%  `, height: \"100%\" })\n//         setTranformWrapper({ width: `${grow.grow}vw`, height: `${grow.radius}vw`, minWidth: grow.min, minHeight: grow.min })\n//         setTextWidth({ width: `${grow.textWidth}vw`, opacity: 1, fontSize: `${grow.fontSize}vw`, delay: 200 })\n//     }\n//     contract ? shrink() : expand()\n//     try {\n//         return (\n//             <animated.div className=\"buttonWrapper\" style={tranformWrapper}>\n//                 <animated.svg\n//                     className=\"buttonSVG\"\n//                     xmlns=\"http://www.w3.org/2000/svg\"\n//                     width={tranformSVG.width}\n//                     height={tranformSVG.height}\n//                     version=\"1.1\"\n//                     viewBox=\"0 0 16.835 15.632\"\n//                 >\n//                     <defs>\n//                         <filter\n//                             id=\"filter973\"\n//                             width=\"1.278\"\n//                             height=\"1.306\"\n//                             x=\"-0.139\"\n//                             y=\"-0.153\"\n//                             colorInterpolationFilters=\"sRGB\"\n//                         >\n//                             <feGaussianBlur stdDeviation=\"0.763\"></feGaussianBlur>\n//                         </filter>\n//                     </defs>\n//                     <g\n//                         fillOpacity=\"1\"\n//                         strokeWidth=\"0.008\"\n//                         transform=\"translate(-54.046 -143.913)\"\n//                     >\n//                         <animated.rect\n//                             style={{ mixBlendMode: \"normal\" }}\n//                             width={tranformBackWidth.width}\n//                             height=\"11.97\"\n//                             x={tranformBackX.x}\n//                             y=\"145.744\"\n//                             fill=\"#000\"\n//                             fillOpacity=\"0.214\"\n//                             filter=\"url(#filter973)\"\n//                             opacity=\"0.799\"\n//                             rx=\"5.476\"\n//                             ry=\"5.985\"\n//                         ></animated.rect>\n//                         <animated.rect\n//                             width={tranformWidth.width}\n//                             height=\"11.331\"\n//                             x={tranformX.x}\n//                             y=\"146.041\"\n//                             fill=\"#fff\"\n//                             rx=\"6.065\"\n//                             ry=\"5.666\"\n//                         ></animated.rect>\n//                     </g>\n//                 </animated.svg>\n//                 <div style={{ width: `${grow.radius}vw`, height: `${grow.radius}vw`, minWidth: grow.min, minHeight: grow.min }} className=\"SVGcontainer\">\n//                     <animated.div style={textWidth} className=\"Text\">{grow.text}</animated.div>\n//                     {children}\n//                 </div>\n//                 <div className=\"eventDetector\" ref={ref}></div>\n//             </animated.div>\n//         );\n//     } catch {\n//         return (\n//             console.log(\"A Button should look like this and also have the same attributes <ButtonPopRight ontract={contract} grow={{radius:4, SVG:6, front:20, transRect:52,textWidth:4,fontSize:1, text:\\\"lets See\\\"}}><div className=\\\"child\\\"></div></ButtonPopRight>\")\n//         )\n//     }\n// });","map":{"version":3,"sources":["C:/Users/suvro/cessini-mail/src/buttons/index.js"],"names":["React","forwardRef","useSpring","config","animated","ButtonPopRightLite","ref","breath","grow","children","expand","title","round1","round2","widthfont","xfront","round","setRound","rest","setRest","width","height","pusher","setPusher","flexGrow","opacity","textDes","setTextDes","pop","duration","shrink","mixBlendMode"],"mappings":"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CAEI,CAAC,CAAC,IAFN,CAGI,KAAK,CAAEG,IAAI,CAACJ,SAHhB,CAII,MAAM,CAAC,KAJX,CAKI,IAAI,CAAC,MALT,CAMI,EAAE,CAAEE,KAAK,CAACJ,MANd,CAOI,EAAE,CAAEI,KAAK,CAACH,MAPd,EA5BJ,CAFJ,CAFJ,cA6CI,2BAAK,SAAS,CAAC,aAAf,eACI,2BAAK,SAAS,CAAC,WAAf,EACKJ,QADL,CADJ,cAII,oBAAC,QAAD,CAAU,GAAV,EAAc,SAAS,CAAC,YAAxB,CAAqC,KAAK,CAAEiB,OAA5C,EACKf,KADL,CAJJ,CA7CJ,cAqDI,oBAAC,QAAD,CAAU,GAAV,EAAc,SAAS,CAAC,gBAAxB,CAAyC,GAAG,CAAEL,GAA9C,EArDJ,CADJ,CADJ,CA4DH,CApF2C,CAArC,CA2FP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { } from 'react-dom';\r\nimport './buttons.css'\r\nimport { useSpring, config, animated } from 'react-spring'\r\n\r\nexport const ButtonPopRightLite = forwardRef(({ breath, grow, children, expand, title }, ref) => {\r\n    const [round, setRound] = useSpring(() => ({ round1: \"50%\", round2: \"50%\", widthfont: \"90%\", xfront: \"5%\" }))\r\n    const [rest, setRest] = useSpring(() => ({ widthfont: \"90%\", xfront: \"5%\" }))\r\n    const [pusher, setPusher] = useSpring(() => ({ width: `${breath}%`, height: \"100%\" }))\r\n    const [textDes, setTextDes] = useSpring(() => ({ flexGrow: 0, opacity: 0 }))\r\n\r\n\r\n    const pop = () => {\r\n\r\n        setRest({ widthfont: \"100%\", xfront: \"0%\" })\r\n        setRound({ round1: \"10%\", config: { duration: 90 } })\r\n        setPusher({ width: `${breath * grow}%` })\r\n        setTextDes({ flexGrow: grow - 1, opacity: 1 })\r\n    }\r\n\r\n    const shrink = () => {\r\n\r\n        setRest({ widthfont: \"90%\", xfront: \"5%\" })\r\n        setRound({ round1: \"50%\", config: { duration: 800 } })\r\n        setPusher({ width: `${breath}%` })\r\n        setTextDes({ flexGrow: 0, opacity: 0 })\r\n    }\r\n\r\n    expand ? pop() : shrink()\r\n    return (\r\n        <>\r\n            <animated.div className=\"liteWrapper\" style={pusher}>\r\n\r\n                <animated.div className=\"ten\" style={{ width: \"100%\", height: \"100%\" }}>\r\n\r\n                    <svg\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                        className=\"tenSVG\"\r\n                    >\r\n                        <defs>\r\n                            <filter\r\n                                id=\"filter973\"\r\n                                width=\"10.278\"\r\n                                height=\"10.306\"\r\n                                x=\"-0.139\"\r\n                                y=\"-0.153\"\r\n                                colorInterpolationFilters=\"sRGB\"\r\n                            >\r\n                                <feGaussianBlur stdDeviation=\"10\"></feGaussianBlur>\r\n                            </filter>\r\n                        </defs>\r\n                        <animated.rect className=\"back\"\r\n                            style={{ mixBlendMode: \"normal\" }}\r\n                            width=\"100%\"\r\n                            height=\"100%\"\r\n                            fill=\"#000\"\r\n                            fillOpacity=\"0.214\"\r\n                            filter=\"url(#filter973)\"\r\n                            opacity=\"0.6\"\r\n                            rx={round.round1}\r\n                            ry={round.round2}\r\n                        ></animated.rect>\r\n                        <animated.rect className=\"font\"\r\n                            x={rest.xfront}\r\n                            y=\"5%\"\r\n                            width={rest.widthfont}\r\n                            height=\"90%\"\r\n                            fill=\"#fff\"\r\n                            rx={round.round1}\r\n                            ry={round.round2}\r\n                        ></animated.rect>\r\n\r\n                    </svg>\r\n\r\n                </animated.div>\r\n                <div className=\"infoWrapper\">\r\n                    <div className=\"svgHolder\">\r\n                        {children}\r\n                    </div>\r\n                    <animated.div className=\"textHolder\" style={textDes}>\r\n                        {title}\r\n                    </animated.div>\r\n                </div>\r\n                <animated.div className=\"eventDetector2\" ref={ref}></animated.div>\r\n            </animated.div>\r\n        </>\r\n\r\n    );\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const ButtonPopRight = forwardRef(({ grow, contract, children }, ref) => {\r\n//     const [textWidth, setTextWidth] = useSpring(() => ({ width: \"0vw\", opacity: 0, fontSize: `${grow.fontSize}vw` }))\r\n//     const [tranformWidth, setTranformWidth] = useSpring(() => ({ width: \"12.131\" }))\r\n//     const [tranformBackWidth, setTranformBackWidth] = useSpring(() => ({ width: \"13.173\" }))\r\n//     const [tranformX, setTranformX] = useSpring(() => ({ x: \"56.383\" }))\r\n//     const [tranformBackX, setTranformBackX] = useSpring(() => ({ x: \"55.877\" }))\r\n//     const [tranformWrapper, setTranformWrapper] = useSpring(() => ({ width: `${grow.radius}vw`, height: `${grow.radius}vw`, minWidth: grow.min, minHeight: grow.min }))\r\n//     const [tranformSVG, setTranformSVG] = useSpring(() => ({ width: \"100%\", height: \"100%\" }))\r\n\r\n//     const shrink = () => {\r\n//         setTranformX({ x: \"56.383\", delay: 50 })\r\n//         setTranformBackX({ x: \"55.877\", delay: 50 })\r\n//         setTranformWidth({ width: \"12.131\" })\r\n//         setTranformBackWidth({ width: \"13.173\" })\r\n//         setTranformSVG({ width: \"100%\", height: \"100%\", delay: 50 })\r\n//         setTranformWrapper({ width: `${grow.radius}vw`, height: `${grow.radius}vw`, minWidth: grow.min, minHeight: grow.min, delay: 300 })\r\n//         setTextWidth({ width: \"0vw\", opacity: 0, fontSize: `${grow.fontSize}vw` })\r\n//     }\r\n\r\n//     const expand = () => {\r\n//         setTranformX({ x: `${grow.transRect}`, delay: 30 })\r\n//         setTranformBackX({ x: `${grow.transRect}`, delay: 30 })\r\n//         setTranformWidth({ width: `${grow.front}`, delay: 30 })\r\n//         setTranformBackWidth({ width: `${grow.front}`, delay: 30 })\r\n//         setTranformSVG({ width: `${grow.SVG}%  `, height: \"100%\" })\r\n//         setTranformWrapper({ width: `${grow.grow}vw`, height: `${grow.radius}vw`, minWidth: grow.min, minHeight: grow.min })\r\n//         setTextWidth({ width: `${grow.textWidth}vw`, opacity: 1, fontSize: `${grow.fontSize}vw`, delay: 200 })\r\n//     }\r\n\r\n//     contract ? shrink() : expand()\r\n//     try {\r\n//         return (\r\n//             <animated.div className=\"buttonWrapper\" style={tranformWrapper}>\r\n//                 <animated.svg\r\n//                     className=\"buttonSVG\"\r\n//                     xmlns=\"http://www.w3.org/2000/svg\"\r\n//                     width={tranformSVG.width}\r\n//                     height={tranformSVG.height}\r\n\r\n//                     version=\"1.1\"\r\n//                     viewBox=\"0 0 16.835 15.632\"\r\n//                 >\r\n//                     <defs>\r\n//                         <filter\r\n//                             id=\"filter973\"\r\n//                             width=\"1.278\"\r\n//                             height=\"1.306\"\r\n//                             x=\"-0.139\"\r\n//                             y=\"-0.153\"\r\n//                             colorInterpolationFilters=\"sRGB\"\r\n//                         >\r\n//                             <feGaussianBlur stdDeviation=\"0.763\"></feGaussianBlur>\r\n//                         </filter>\r\n//                     </defs>\r\n//                     <g\r\n//                         fillOpacity=\"1\"\r\n//                         strokeWidth=\"0.008\"\r\n//                         transform=\"translate(-54.046 -143.913)\"\r\n//                     >\r\n//                         <animated.rect\r\n//                             style={{ mixBlendMode: \"normal\" }}\r\n//                             width={tranformBackWidth.width}\r\n//                             height=\"11.97\"\r\n//                             x={tranformBackX.x}\r\n//                             y=\"145.744\"\r\n//                             fill=\"#000\"\r\n//                             fillOpacity=\"0.214\"\r\n//                             filter=\"url(#filter973)\"\r\n//                             opacity=\"0.799\"\r\n//                             rx=\"5.476\"\r\n//                             ry=\"5.985\"\r\n//                         ></animated.rect>\r\n//                         <animated.rect\r\n//                             width={tranformWidth.width}\r\n//                             height=\"11.331\"\r\n//                             x={tranformX.x}\r\n//                             y=\"146.041\"\r\n//                             fill=\"#fff\"\r\n//                             rx=\"6.065\"\r\n//                             ry=\"5.666\"\r\n//                         ></animated.rect>\r\n//                     </g>\r\n//                 </animated.svg>\r\n//                 <div style={{ width: `${grow.radius}vw`, height: `${grow.radius}vw`, minWidth: grow.min, minHeight: grow.min }} className=\"SVGcontainer\">\r\n//                     <animated.div style={textWidth} className=\"Text\">{grow.text}</animated.div>\r\n//                     {children}\r\n//                 </div>\r\n//                 <div className=\"eventDetector\" ref={ref}></div>\r\n//             </animated.div>\r\n\r\n//         );\r\n//     } catch {\r\n//         return (\r\n//             console.log(\"A Button should look like this and also have the same attributes <ButtonPopRight ontract={contract} grow={{radius:4, SVG:6, front:20, transRect:52,textWidth:4,fontSize:1, text:\\\"lets See\\\"}}><div className=\\\"child\\\"></div></ButtonPopRight>\")\r\n//         )\r\n//     }\r\n// });\r\n\r\n"]},"metadata":{},"sourceType":"module"}