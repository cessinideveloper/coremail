{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\suvro\\\\cessini-mail\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(watchUserSignIn),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchCampAdd),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(watchEmailListAdd),_marked4=/*#__PURE__*/_regeneratorRuntime.mark(getEmailList),_marked5=/*#__PURE__*/_regeneratorRuntime.mark(getCampaigns);import{call,take,put,delay,fork}from\"redux-saga/effects\";import axios from'axios';import store from'../store/store';import{ActionTypes,storeAllEmailList,storeAllCampaigns}from'../actions';var fetchEmaillist=function fetchEmaillist(){return fetch(\"https://emailengine2020.herokuapp.com/newemail/\").then(function(re){return re.json();});};var fetchCampaings=function fetchCampaings(){return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\").then(function(re){return re.json();});};var postEmaillist=function postEmaillist(){return axios.post(\"https://emailengine2020.herokuapp.com/newemail/\").then(function(re){return re.json();});};var postCampaings=function postCampaings(){return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\").then(function(re){return re.json();});};export function watchUserSignIn(){var _yield$take,payload;return _regeneratorRuntime.wrap(function watchUserSignIn$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!true){_context.next=11;break;}_context.next=3;return take(ActionTypes.GET_ALL_EMAIL_LIST);case 3:_yield$take=_context.sent;payload=_yield$take.payload;_context.next=7;return fork(getCampaigns,payload);case 7:_context.next=9;return call(getEmailList,payload);case 9:_context.next=0;break;case 11:case\"end\":return _context.stop();}}},_marked);}export function watchCampAdd(){var _yield$take2,payload;return _regeneratorRuntime.wrap(function watchCampAdd$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!true){_context2.next=11;break;}_context2.next=3;return take(ActionTypes.EMAIL_LIST_ADDED);case 3:_yield$take2=_context2.sent;payload=_yield$take2.payload;_context2.next=7;return fork(getCampaigns,store.getState().userData.id);case 7:_context2.next=9;return call(getEmailList,store.getState().userData.id);case 9:_context2.next=0;break;case 11:case\"end\":return _context2.stop();}}},_marked2);}export function watchEmailListAdd(){var _yield$take3,payload;return _regeneratorRuntime.wrap(function watchEmailListAdd$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!true){_context3.next=11;break;}_context3.next=3;return take(ActionTypes.CAMPAIGNS_ADDED);case 3:_yield$take3=_context3.sent;payload=_yield$take3.payload;_context3.next=7;return fork(getCampaigns,store.getState().userData.id);case 7:_context3.next=9;return call(getEmailList,store.getState().userData.id);case 9:_context3.next=0;break;case 11:case\"end\":return _context3.stop();}}},_marked3);}export function getEmailList(payload){var allEmailList,filteredEmailList;return _regeneratorRuntime.wrap(function getEmailList$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:delay(300);_context4.next=3;return call(fetchEmaillist);case 3:allEmailList=_context4.sent;filteredEmailList=allEmailList.filter(function(emailList){return emailList.my_customer===payload;});_context4.next=7;return put(storeAllEmailList(filteredEmailList));case 7:case\"end\":return _context4.stop();}}},_marked4);}export function getCampaigns(payload){var allCampaigns,filteredCampaigns;return _regeneratorRuntime.wrap(function getCampaigns$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:delay(300);_context5.next=3;return call(fetchCampaings);case 3:allCampaigns=_context5.sent;filteredCampaigns=allCampaigns.filter(function(camp){return camp.my_customer===payload;});_context5.next=7;return put(storeAllCampaigns(filteredCampaigns));case 7:case\"end\":return _context5.stop();}}},_marked5);}","map":{"version":3,"sources":["C:/Users/suvro/cessini-mail/src/saga/index.js"],"names":["watchUserSignIn","watchCampAdd","watchEmailListAdd","getEmailList","getCampaigns","call","take","put","delay","fork","axios","store","ActionTypes","storeAllEmailList","storeAllCampaigns","fetchEmaillist","fetch","then","re","json","fetchCampaings","postEmaillist","post","postCampaings","GET_ALL_EMAIL_LIST","payload","EMAIL_LIST_ADDED","getState","userData","id","CAMPAIGNS_ADDED","allEmailList","filteredEmailList","filter","emailList","my_customer","allCampaigns","filteredCampaigns","camp"],"mappings":"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","sourcesContent":["import {\r\n    call, take, put, delay, fork\r\n} from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport store from '../store/store'\r\nimport { ActionTypes, storeAllEmailList, storeAllCampaigns } from '../actions'\r\n\r\n\r\nconst fetchEmaillist = () => {\r\n    return fetch(\"https://emailengine2020.herokuapp.com/newemail/\").then(re => re.json())\r\n}\r\n\r\nconst fetchCampaings = () => {\r\n    return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\").then(re => re.json())\r\n}\r\n\r\nconst postEmaillist = () => {\r\n    return axios.post(\"https://emailengine2020.herokuapp.com/newemail/\").then(re => re.json())\r\n}\r\n\r\nconst postCampaings = () => {\r\n    return fetch(\"https://emailengine2020.herokuapp.com/newcampaign\").then(re => re.json())\r\n}\r\n\r\nexport function* watchUserSignIn() {\r\n    while (true) {\r\n        const { payload } = yield take(ActionTypes.GET_ALL_EMAIL_LIST)\r\n        yield fork(getCampaigns, payload)\r\n        yield call(getEmailList, payload)\r\n    }\r\n}\r\n\r\nexport function* watchCampAdd() {\r\n    while (true) {\r\n        const { payload } = yield take(ActionTypes.EMAIL_LIST_ADDED)\r\n        yield fork(getCampaigns, store.getState().userData.id)\r\n        yield call(getEmailList, store.getState().userData.id)\r\n    }\r\n}\r\n\r\nexport function* watchEmailListAdd() {\r\n    while (true) {\r\n        const { payload } = yield take(ActionTypes.CAMPAIGNS_ADDED)\r\n        yield fork(getCampaigns, store.getState().userData.id)\r\n        yield call(getEmailList, store.getState().userData.id)\r\n    }\r\n}\r\n\r\nexport function* getEmailList(payload) {\r\n    delay(300)\r\n    const allEmailList = yield call(fetchEmaillist)\r\n    const filteredEmailList = allEmailList.filter(emailList => emailList.my_customer === payload)\r\n    yield put(storeAllEmailList(filteredEmailList))\r\n}\r\n\r\nexport function* getCampaigns(payload) {\r\n    delay(300)\r\n    const allCampaigns = yield call(fetchCampaings)\r\n    const filteredCampaigns = allCampaigns.filter(camp => camp.my_customer === payload)\r\n    yield put(storeAllCampaigns(filteredCampaigns))\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}