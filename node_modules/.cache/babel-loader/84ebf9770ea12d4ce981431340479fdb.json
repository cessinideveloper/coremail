{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\suvro\\\\cessini2\\\\src\\\\components\\\\Dashboard\\\\campaignHolder\\\\newCampaign\\\\loadedCampForm.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport store from '../../../../store/store';\nimport { storeCampaign } from '../../../../actions';\n\nconst LoadedCampForm = ({\n  newCampaignData,\n  setNewCampaignData,\n  loadTheTemplate,\n  loaded,\n  setLoaded\n}) => {\n  useEffect(() => {\n    const loadedCamp = store.getState().loadedCampaign ? store.getState().loadedCampaign.campId : null;\n\n    if (loadedCamp) {\n      if (!loaded) {\n        console.log(\"getting into if\");\n        const first = store.getState().campaigns.filter(camp => camp.id === loadedCamp);\n        setNewCampaignData(first[0]);\n        setLoaded(true);\n      }\n    }\n  }, []);\n  const camNameRef = useRef(null);\n  const SenderNameRef = useRef(null);\n  const emailSubRef = useRef(null);\n  const SenderEmailRef = useRef(null);\n  console.log(newCampaignData.campName);\n  const {\n    push\n  } = useHistory(null);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"topNavCam  subWrapperCam\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createCamp   topButtonsCam subWrapperCam\",\n    onClick: () => push(\"/dashboard\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, \"Back\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashBodyMainCam  subWrapperCam\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"camFormHolder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"formFields  Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"leftFields Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"camName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 33\n    }\n  }, \"Campaign Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.name,\n    ref: camNameRef,\n    type: \"text\",\n    id: \"camName\",\n    name: \"camName\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      name: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"SenderName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 33\n    }\n  }, \"Sender Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.sender_name,\n    ref: SenderNameRef,\n    type: \"text\",\n    id: \"SenderName\",\n    name: \"SenderName\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      sender_name: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailSub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 33\n    }\n  }, \"Email Subject\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.email_subject,\n    ref: emailSubRef,\n    type: \"text\",\n    id: \"emailSub\",\n    name: \"camName\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      email_subject: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rightFields Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"SenderEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 33\n    }\n  }, \"Sender Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.sender_email,\n    ref: SenderEmailRef,\n    type: \"text\",\n    id: \"SenderEmail\",\n    name: \"SenderEmail\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      sender_email: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subFieldLong Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 33\n    }\n  }, \"Email Attachment\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    id: \"emailList\",\n    files: [newCampaignData.attachment],\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      attachment: e.target.files[0]\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subFieldLong Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 33\n    }\n  }, \"Email Body\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"emailBody\",\n    className: \"desBody Fields formButtonsCam\",\n    onClick: () => {\n      push(\"/dashboard/loadedcamp/maileditor\");\n      setTimeout(() => {\n        loadTheTemplate(newCampaignData.temp_json);\n      }, 500);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 33\n    }\n  }, \"Deisgn Body\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formButtons Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sendButton Fields formButtonsCam\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, \"Update & Send\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createButton Fields formButtonsCam\",\n    onClick: () => {\n      setSaveNexitButtonStyle({\n        transform: \"scaleX(1)\",\n        text: \"Sending...\",\n        backgroundColor: \"#ff9f1bff\"\n      });\n      emailEditorRef.current.editor.exportHtml(({\n        design,\n        html\n      }) => {\n        setSaveNexitButtonStyle({ ...newCampaignData,\n          emailBodyJSON: design,\n          emailBodyHTML: html\n        });\n        setTimeout(() => {\n          let dataForm = new FormData();\n          let Jda = JSON.stringify(newCampaignData.emailBodyJSON);\n          dataForm.append(\"name\", newCampaignData.campName);\n          dataForm.append(\"sender_name\", newCampaignData.senderName);\n          dataForm.append(\"sender_email\", newCampaignData.senderEmail);\n          dataForm.append(\"email_subject\", newCampaignData.emailSub);\n          dataForm.append(\"my_customer\", store.getState().userData.id);\n          dataForm.append(\"camp_emails\", Number(newCampaignData.emailListCVS));\n          dataForm.append(\"email_message\", \"will see\");\n          dataForm.append(\"temp_json\", Jda);\n          dataForm.append(\"ht\", html);\n          dataForm.append(\"attachment\", newCampaignData.emailAttachment); //newCampaignData.emailAttachment)\n\n          axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => {\n            console.log(res.data);\n            store.dispatch(addCampaign());\n            setSendButtonStyle({\n              transform: \"scaleX(1)\",\n              text: \"Done!\",\n              backgroundColor: \"#365194ff\"\n            });\n            setTimeout(() => {\n              push('/dashboard');\n            }, 200);\n          }).catch(er => {\n            if (er.response) {\n              if (er.response.status === 500) {\n                document.getElementsByClassName(\"addEmailList topButtonsCam subWrapperCam\")[0].click(); // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => res.data)\n              }\n            }\n          });\n        }, 0);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, \"Update & Exit \")))));\n};\n\nexport default LoadedCampForm;","map":{"version":3,"sources":["C:/Users/suvro/cessini2/src/components/Dashboard/campaignHolder/newCampaign/loadedCampForm.js"],"names":["React","useEffect","useState","useRef","useHistory","store","storeCampaign","LoadedCampForm","newCampaignData","setNewCampaignData","loadTheTemplate","loaded","setLoaded","loadedCamp","getState","loadedCampaign","campId","console","log","first","campaigns","filter","camp","id","camNameRef","SenderNameRef","emailSubRef","SenderEmailRef","campName","push","name","e","target","value","sender_name","email_subject","sender_email","attachment","files","setTimeout","temp_json","setSaveNexitButtonStyle","transform","text","backgroundColor","emailEditorRef","current","editor","exportHtml","design","html","emailBodyJSON","emailBodyHTML","dataForm","FormData","Jda","JSON","stringify","append","senderName","senderEmail","emailSub","userData","Number","emailListCVS","emailAttachment","axios","post","then","res","data","dispatch","addCampaign","setSendButtonStyle","catch","er","response","status","document","getElementsByClassName","click"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport store from '../../../../store/store'\r\nimport { storeCampaign } from '../../../../actions'\r\n\r\nconst LoadedCampForm = ({ newCampaignData, setNewCampaignData, loadTheTemplate, loaded, setLoaded }) => {\r\n\r\n    useEffect(() => {\r\n        const loadedCamp = store.getState().loadedCampaign ? store.getState().loadedCampaign.campId : null\r\n        if (loadedCamp) {\r\n            if (!loaded) {\r\n                console.log(\"getting into if\")\r\n                const first = store.getState().campaigns.filter(camp => camp.id === loadedCamp)\r\n                setNewCampaignData(first[0])\r\n                setLoaded(true)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    const camNameRef = useRef(null)\r\n    const SenderNameRef = useRef(null)\r\n    const emailSubRef = useRef(null)\r\n    const SenderEmailRef = useRef(null)\r\n\r\n    console.log(newCampaignData.campName)\r\n\r\n\r\n    const { push } = useHistory(null)\r\n    return (\r\n        <>\r\n            <div className=\"topNavCam  subWrapperCam\">\r\n                <div className=\"createCamp   topButtonsCam subWrapperCam\"\r\n                    onClick={() => push(\"/dashboard\")}\r\n                >\r\n                    Back\r\n                </div>\r\n                {/* <div className=\"addEmailList topButtonsCam subWrapperCam\">\r\n                    <p>Save & Next</p>\r\n                </div> */}\r\n\r\n            </div>\r\n            <div className=\"dashBodyMainCam  subWrapperCam\">\r\n                <div className=\"camFormHolder\">\r\n                    <form className=\"formFields  Fields\">\r\n                        <div className=\"leftFields Fields\">\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"camName\">Campaign Name</label>\r\n                                <input defaultValue={newCampaignData.name} ref={camNameRef} type=\"text\" id=\"camName\" name=\"camName\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, name: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"SenderName\">Sender Name</label>\r\n                                <input defaultValue={newCampaignData.sender_name} ref={SenderNameRef} type=\"text\" id=\"SenderName\" name=\"SenderName\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, sender_name: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"emailSub\">Email Subject</label>\r\n                                <input defaultValue={newCampaignData.email_subject} ref={emailSubRef} type=\"text\" id=\"emailSub\" name=\"camName\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, email_subject: e.target.value })}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"rightFields Fields\">\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"SenderEmail\">Sender Email</label>\r\n                                <input defaultValue={newCampaignData.sender_email} ref={SenderEmailRef} type=\"text\" id=\"SenderEmail\" name=\"SenderEmail\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, sender_email: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            <div className=\"subFieldLong Fields\">\r\n                                <label htmlFor=\"emailList\">Email Attachment</label>\r\n\r\n                                <input type=\"file\" id=\"emailList\" files={[newCampaignData.attachment]}\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, attachment: e.target.files[0] })}\r\n                                />\r\n                            </div>\r\n                            <div className=\"subFieldLong Fields\">\r\n                                <label htmlFor=\"emailBody\">Email Body</label>\r\n                                {/* <select id=\"camName\" name=\"camName\">\r\n                                <option value=\"NoEmailList\">Please Create Email List</option>\r\n                            </select> */}\r\n                                <div id=\"emailBody\" className=\"desBody Fields formButtonsCam\"\r\n                                    onClick={() => {\r\n                                        push(\"/dashboard/loadedcamp/maileditor\")\r\n                                        setTimeout(() => {\r\n                                            loadTheTemplate(newCampaignData.temp_json)\r\n                                        }, 500)\r\n                                    }}\r\n                                >\r\n                                    Deisgn Body\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    <div className=\"formButtons Fields\">\r\n                        <div className=\"sendButton Fields formButtonsCam\"\r\n\r\n                        >\r\n                            Update & Send{/* {update ? \"Update & Send\" : \"Save & Send\"} */}\r\n                        </div>\r\n                        <div className=\"createButton Fields formButtonsCam\"\r\n                            onClick={() => {\r\n                                setSaveNexitButtonStyle({ transform: \"scaleX(1)\", text: \"Sending...\", backgroundColor: \"#ff9f1bff\" });\r\n                                emailEditorRef.current.editor.exportHtml(({ design, html }) => {\r\n                                    setSaveNexitButtonStyle({ ...newCampaignData, emailBodyJSON: design, emailBodyHTML: html })\r\n                                    setTimeout(() => {\r\n                                        let dataForm = new FormData\r\n                                        let Jda = JSON.stringify(newCampaignData.emailBodyJSON)\r\n                                        dataForm.append(\"name\", newCampaignData.campName)\r\n                                        dataForm.append(\"sender_name\", newCampaignData.senderName)\r\n                                        dataForm.append(\"sender_email\", newCampaignData.senderEmail)\r\n                                        dataForm.append(\"email_subject\", newCampaignData.emailSub)\r\n                                        dataForm.append(\"my_customer\", store.getState().userData.id)\r\n                                        dataForm.append(\"camp_emails\", Number(newCampaignData.emailListCVS))\r\n                                        dataForm.append(\"email_message\", \"will see\")\r\n                                        dataForm.append(\"temp_json\", Jda)\r\n                                        dataForm.append(\"ht\", html)\r\n                                        dataForm.append(\"attachment\", newCampaignData.emailAttachment)//newCampaignData.emailAttachment)\r\n                                        axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\",\r\n                                            dataForm\r\n                                        ).then(res => {\r\n                                            console.log(res.data)\r\n                                            store.dispatch(addCampaign())\r\n                                            setSendButtonStyle({ transform: \"scaleX(1)\", text: \"Done!\", backgroundColor: \"#365194ff\" });\r\n                                            setTimeout(() => { push('/dashboard') }, 200)\r\n                                        })\r\n                                            .catch(er => {\r\n                                                if (er.response) {\r\n                                                    if (er.response.status === 500) {\r\n                                                        document.getElementsByClassName(\"addEmailList topButtonsCam subWrapperCam\")[0].click()\r\n                                                        // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => res.data)\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            )\r\n\r\n                                    }, 0)\r\n\r\n                                })\r\n                            }\r\n                            }\r\n                        >\r\n                            Update & Exit {/* {update ? \"Update & Exit\" : \"Save & Exit\"} */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoadedCampForm;"]},"metadata":{},"sourceType":"module"}