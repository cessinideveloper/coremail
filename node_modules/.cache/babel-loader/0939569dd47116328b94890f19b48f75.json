{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { ActionTypes } from '../actions';\nlet lastCamp = 0;\nconst initialUser = {\n  username: \"\",\n  //string\n  password: \"\",\n  //string\n  email: \"\",\n  //string\n  id: 0,\n  //number\n  token: \"\" //string\n\n};\n\nconst storeUser = (user = initialUser, action) => {\n  if (action.type === ActionTypes.STORE_USER) {\n    return action.payload;\n  }\n\n  return user;\n};\n\nconst storeCampaign = (campaigns = [], action) => {\n  if (action.type === ActionTypes.STORE_ALL_CAMPAIGNS) {\n    return action.payload;\n  } else if (action.type === ActionTypes.DELETE_CAMPAIGN) {\n    return emailList.filter(list => list.id !== action.payload);\n  }\n\n  return campaigns;\n};\n\nconst loadCampaign = (loadedCamp = {\n  campId: 0,\n  campName: \"\"\n}, action) => {\n  if (action.type === ActionTypes.LOAD_CAMPAIGN) {\n    return action.payload;\n  }\n\n  return loadedCamp;\n};\n\nconst storeEmailList = (emailList = [], action) => {\n  if (action.type === ActionTypes.STORE_ALL_EMAIL_LIST) {\n    return action.payload;\n  } else if (action.type === ActionTypes.DELETE_EMAIL_LIST) {\n    return emailList.filter(list => list.id !== action.payload);\n  }\n\n  return emailList;\n};\n\nconst rootReducer = combineReducers({\n  userData: storeUser,\n  campaigns: storeCampaign,\n  emailList: storeEmailList,\n  loadedCampaign: loadCampaign\n});\nexport default rootReducer; // const modeTypeReducer = (mode={activeSend:false, activeMail:false}, action) => {\n//     if (action.type === \"MODE_SELECTED\"){\n//         if (action.payload === \"Send\"){\n//             return {activeSend:true, activeMail:false}\n//         }else if (action.payload === \"Mail\"){\n//             return {activeSend:false, activeMail:true}\n//         }else\n//             return mode \n//     }\n//     return mode \n// };","map":{"version":3,"sources":["C:/Users/suvro/cessini2/src/reducers/index.js"],"names":["combineReducers","ActionTypes","lastCamp","initialUser","username","password","email","id","token","storeUser","user","action","type","STORE_USER","payload","storeCampaign","campaigns","STORE_ALL_CAMPAIGNS","DELETE_CAMPAIGN","emailList","filter","list","loadCampaign","loadedCamp","campId","campName","LOAD_CAMPAIGN","storeEmailList","STORE_ALL_EMAIL_LIST","DELETE_EMAIL_LIST","rootReducer","userData","loadedCampaign"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA,IAAIC,QAAQ,GAAG,CAAf;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,QAAQ,EAAE,EADM;AACH;AACbC,EAAAA,QAAQ,EAAE,EAFM;AAEF;AACdC,EAAAA,KAAK,EAAE,EAHS;AAGF;AACdC,EAAAA,EAAE,EAAE,CAJY;AAIT;AACPC,EAAAA,KAAK,EAAE,EALS,CAKP;;AALO,CAApB;;AASA,MAAMC,SAAS,GAAG,CAACC,IAAI,GAAGP,WAAR,EAAqBQ,MAArB,KAAgC;AAC9C,MAAIA,MAAM,CAACC,IAAP,KAAgBX,WAAW,CAACY,UAAhC,EAA4C;AACxC,WAAOF,MAAM,CAACG,OAAd;AACH;;AACD,SAAOJ,IAAP;AACH,CALD;;AAOA,MAAMK,aAAa,GAAG,CAACC,SAAS,GAAG,EAAb,EAAiBL,MAAjB,KAA4B;AAC9C,MAAIA,MAAM,CAACC,IAAP,KAAgBX,WAAW,CAACgB,mBAAhC,EAAqD;AACjD,WAAON,MAAM,CAACG,OAAd;AACH,GAFD,MAEO,IAAIH,MAAM,CAACC,IAAP,KAAgBX,WAAW,CAACiB,eAAhC,EAAiD;AACpD,WAAOC,SAAS,CAACC,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACd,EAAL,KAAYI,MAAM,CAACG,OAA5C,CAAP;AACH;;AACD,SAAOE,SAAP;AACH,CAPD;;AASA,MAAMM,YAAY,GAAG,CAACC,UAAU,GAAG;AAAEC,EAAAA,MAAM,EAAE,CAAV;AAAaC,EAAAA,QAAQ,EAAE;AAAvB,CAAd,EAA2Cd,MAA3C,KAAsD;AACvE,MAAIA,MAAM,CAACC,IAAP,KAAgBX,WAAW,CAACyB,aAAhC,EAA+C;AAC3C,WAAOf,MAAM,CAACG,OAAd;AACH;;AACD,SAAOS,UAAP;AACH,CALD;;AAOA,MAAMI,cAAc,GAAG,CAACR,SAAS,GAAG,EAAb,EAAiBR,MAAjB,KAA4B;AAC/C,MAAIA,MAAM,CAACC,IAAP,KAAgBX,WAAW,CAAC2B,oBAAhC,EAAsD;AAClD,WAAOjB,MAAM,CAACG,OAAd;AACH,GAFD,MAEO,IAAIH,MAAM,CAACC,IAAP,KAAgBX,WAAW,CAAC4B,iBAAhC,EAAmD;AACtD,WAAOV,SAAS,CAACC,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACd,EAAL,KAAYI,MAAM,CAACG,OAA5C,CAAP;AACH;;AACD,SAAOK,SAAP;AACH,CAPD;;AAUA,MAAMW,WAAW,GAAG9B,eAAe,CAAC;AAChC+B,EAAAA,QAAQ,EAAEtB,SADsB;AAEhCO,EAAAA,SAAS,EAAED,aAFqB;AAGhCI,EAAAA,SAAS,EAAEQ,cAHqB;AAIhCK,EAAAA,cAAc,EAAEV;AAJgB,CAAD,CAAnC;AAQA,eAAeQ,WAAf,C,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { ActionTypes } from '../actions'\r\n\r\nlet lastCamp = 0\r\n\r\nconst initialUser = {\r\n    username: \"\",//string\r\n    password: \"\", //string\r\n    email: \"\",    //string\r\n    id: 0, //number\r\n    token: \"\"//string\r\n}\r\n\r\n\r\nconst storeUser = (user = initialUser, action) => {\r\n    if (action.type === ActionTypes.STORE_USER) {\r\n        return action.payload\r\n    }\r\n    return user\r\n};\r\n\r\nconst storeCampaign = (campaigns = [], action) => {\r\n    if (action.type === ActionTypes.STORE_ALL_CAMPAIGNS) {\r\n        return action.payload\r\n    } else if (action.type === ActionTypes.DELETE_CAMPAIGN) {\r\n        return emailList.filter(list => list.id !== action.payload)\r\n    }\r\n    return campaigns\r\n};\r\n\r\nconst loadCampaign = (loadedCamp = { campId: 0, campName: \"\" }, action) => {\r\n    if (action.type === ActionTypes.LOAD_CAMPAIGN) {\r\n        return action.payload\r\n    }\r\n    return loadedCamp\r\n};\r\n\r\nconst storeEmailList = (emailList = [], action) => {\r\n    if (action.type === ActionTypes.STORE_ALL_EMAIL_LIST) {\r\n        return action.payload\r\n    } else if (action.type === ActionTypes.DELETE_EMAIL_LIST) {\r\n        return emailList.filter(list => list.id !== action.payload)\r\n    }\r\n    return emailList\r\n};\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    userData: storeUser,\r\n    campaigns: storeCampaign,\r\n    emailList: storeEmailList,\r\n    loadedCampaign: loadCampaign\r\n\r\n});\r\n\r\nexport default rootReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const modeTypeReducer = (mode={activeSend:false, activeMail:false}, action) => {\r\n//     if (action.type === \"MODE_SELECTED\"){\r\n//         if (action.payload === \"Send\"){\r\n//             return {activeSend:true, activeMail:false}\r\n//         }else if (action.payload === \"Mail\"){\r\n//             return {activeSend:false, activeMail:true}\r\n//         }else\r\n//             return mode \r\n//     }\r\n//     return mode \r\n// };\r\n"]},"metadata":{},"sourceType":"module"}