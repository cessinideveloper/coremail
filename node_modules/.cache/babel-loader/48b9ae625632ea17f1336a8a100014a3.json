{"ast":null,"code":"var _jsxFileName = \"X:\\\\cessini2\\\\src\\\\components\\\\Dashboard\\\\campaignHolder\\\\newCampaign\\\\loadedCampForm.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport store from '../../../../store/store';\nimport { storeCampaign, updateCampaign } from '../../../../actions';\nimport { useSpring, animated } from 'react-spring';\nimport axios from 'axios';\n\nconst LoadedCampForm = ({\n  newCampaignData,\n  setNewCampaignData,\n  loadTheTemplate,\n  loaded,\n  setLoaded\n}) => {\n  const [emailCSV, setEmailCSV] = useState([]);\n  const [upNexitButtonStyle, setUpNexitButtonStyle] = useSpring(() => ({\n    text: \"Update & Exit\",\n    backgroundColor: \"#365194ff\"\n  }));\n  const [upNsendButtonStyle, setUpNsendButtonStyle] = useSpring(() => ({\n    text: \"Update & Send\",\n    backgroundColor: \"#365194ff\"\n  }));\n  useEffect(() => {\n    const loadedCamp = store.getState().loadedCampaign ? store.getState().loadedCampaign.campId : null;\n\n    if (loadedCamp) {\n      if (!loaded) {\n        console.log(\"getting into if\");\n        const first = store.getState().campaigns.filter(camp => camp.id === loadedCamp);\n        setNewCampaignData(first[0]);\n        setLoaded(true);\n      }\n    }\n\n    setEmailCSV(store.getState().emailList);\n  }, []);\n  const options = emailCSV ? emailCSV.map(list => /*#__PURE__*/React.createElement(\"option\", {\n    key: list.id,\n    value: list.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, list.name)) : null;\n  const camNameRef = useRef(null);\n  const SenderNameRef = useRef(null);\n  const emailSubRef = useRef(null);\n  const SenderEmailRef = useRef(null);\n  console.log(newCampaignData.campName);\n  const {\n    push\n  } = useHistory(null);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"topNavCam  subWrapperCam\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createCamp   topButtonsCam subWrapperCam\",\n    onClick: () => push(\"/dashboard\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, \"Back\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashBodyMainCam  subWrapperCam\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"camFormHolder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"formFields  Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"leftFields Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"camName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 33\n    }\n  }, \"Campaign Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.name,\n    ref: camNameRef,\n    type: \"text\",\n    id: \"camName\",\n    name: \"camName\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      name: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"SenderName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 33\n    }\n  }, \"Sender Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.sender_name,\n    ref: SenderNameRef,\n    type: \"text\",\n    id: \"SenderName\",\n    name: \"SenderName\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      sender_name: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailSub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 33\n    }\n  }, \"Email Subject\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.email_subject,\n    ref: emailSubRef,\n    type: \"text\",\n    id: \"emailSub\",\n    name: \"camName\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      email_subject: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rightFields Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"SenderEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 33\n    }\n  }, \"Sender Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.sender_email,\n    ref: SenderEmailRef,\n    type: \"text\",\n    id: \"SenderEmail\",\n    name: \"SenderEmail\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      sender_email: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subFieldLong Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 33\n    }\n  }, \"Email Attachment\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    id: \"emailList\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      attachment: e.target.files[0]\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailLists\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 33\n    }\n  }, \"Email List\"), console.log(newCampaignData.camp_emails), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"camName\",\n    name: \"camName\",\n    value: newCampaignData.camp_emails,\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      camp_emails: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 33\n    }\n  }, options)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subFieldLong Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 33\n    }\n  }, \"Email Body\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"emailBody\",\n    className: \"desBody Fields formButtonsCam\",\n    onClick: () => {\n      push(\"/dashboard/loadedcamp/maileditor\");\n      setTimeout(() => {\n        loadTheTemplate(newCampaignData.temp_json);\n      }, 500);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 33\n    }\n  }, \"Deisgn Body\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formButtons Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(animated.div, {\n    className: \"sendButton Fields formButtonsCam\",\n    style: upNsendButtonStyle,\n    onClick: () => {\n      setUpNsendButtonStyle({\n        text: \"Sending...\",\n        backgroundColor: \"#389685ff\"\n      });\n      axios.post(`https://emailengine2020.herokuapp.com/campid/${newCampaignData.id}/`).then(res => {\n        setTimeout(() => {\n          setUpNsendButtonStyle({\n            text: \"Sent!\",\n            backgroundColor: \"#656565ff\"\n          });\n        }, 1000);\n        setTimeout(() => {\n          push('/dashboard');\n        }, 1300);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }, upNsendButtonStyle.text), /*#__PURE__*/React.createElement(animated.div, {\n    className: \"createButton Fields formButtonsCam\",\n    style: upNexitButtonStyle,\n    onClick: () => {\n      setUpNexitButtonStyle({\n        transform: \"scaleX(1)\",\n        text: \"Updating...\",\n        backgroundColor: \"#389685ff\"\n      });\n      setTimeout(() => {\n        //console.log(newCampaignData.ht)\n        let dataForm = new FormData();\n        let Jda = JSON.stringify(newCampaignData.temp_json);\n        dataForm.append(\"name\", newCampaignData.name);\n        dataForm.append(\"sender_name\", newCampaignData.sender_name);\n        dataForm.append(\"sender_email\", newCampaignData.sender_email);\n        dataForm.append(\"email_subject\", newCampaignData.email_subject);\n        dataForm.append(\"my_customer\", store.getState().userData.id);\n        dataForm.append(\"camp_emails\", 6);\n        dataForm.append(\"email_message\", \"will see\");\n        dataForm.append(\"temp_json\", Jda);\n        dataForm.append(\"ht\", newCampaignData.ht);\n\n        if (typeof !newCampaignData.attachment === 'string') {\n          dataForm.append(\"attachment\", newCampaignData.attachment);\n        }\n\n        axios.put(`https://emailengine2020.herokuapp.com/camprud/${store.getState().loadedCampaign.campId}/`, dataForm).then(res => {\n          console.log(res);\n          console.log(\"reached res\");\n          store.dispatch(updateCampaign(store.getState().userData.id));\n          setTimeout(() => {\n            setUpNexitButtonStyle({\n              text: \"Done!\",\n              backgroundColor: \"#365194ff\"\n            });\n          }, 1000);\n          setTimeout(() => {\n            push('/dashboard');\n          }, 1300);\n        }).catch(er => {\n          console.log(er);\n          console.log(\"reached er\");\n\n          if (er.response) {//console.log(er.response.data)\n            // if (er.response.status === 500) {\n            //     document.getElementsByClassName(\"addEmailList topButtonsCam subWrapperCam\")[0].click()\n            //     // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => res.data)\n            // }\n          }\n        });\n      }, 0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  }, upNexitButtonStyle.text)))));\n};\n\nexport default LoadedCampForm;","map":{"version":3,"sources":["X:/cessini2/src/components/Dashboard/campaignHolder/newCampaign/loadedCampForm.js"],"names":["React","useEffect","useState","useRef","useHistory","store","storeCampaign","updateCampaign","useSpring","animated","axios","LoadedCampForm","newCampaignData","setNewCampaignData","loadTheTemplate","loaded","setLoaded","emailCSV","setEmailCSV","upNexitButtonStyle","setUpNexitButtonStyle","text","backgroundColor","upNsendButtonStyle","setUpNsendButtonStyle","loadedCamp","getState","loadedCampaign","campId","console","log","first","campaigns","filter","camp","id","emailList","options","map","list","name","camNameRef","SenderNameRef","emailSubRef","SenderEmailRef","campName","push","e","target","value","sender_name","email_subject","sender_email","attachment","files","camp_emails","setTimeout","temp_json","post","then","res","transform","dataForm","FormData","Jda","JSON","stringify","append","userData","ht","put","dispatch","catch","er","response"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport store from '../../../../store/store'\r\nimport { storeCampaign, updateCampaign } from '../../../../actions'\r\nimport { useSpring, animated } from 'react-spring'\r\nimport axios from 'axios'\r\n\r\nconst LoadedCampForm = ({ newCampaignData, setNewCampaignData, loadTheTemplate, loaded, setLoaded }) => {\r\n    const [emailCSV, setEmailCSV] = useState([])\r\n\r\n    const [upNexitButtonStyle, setUpNexitButtonStyle] = useSpring(() => ({ text: \"Update & Exit\", backgroundColor: \"#365194ff\" }))\r\n    const [upNsendButtonStyle, setUpNsendButtonStyle] = useSpring(() => ({ text: \"Update & Send\", backgroundColor: \"#365194ff\" }))\r\n\r\n    useEffect(() => {\r\n        const loadedCamp = store.getState().loadedCampaign ? store.getState().loadedCampaign.campId : null\r\n        if (loadedCamp) {\r\n            if (!loaded) {\r\n                console.log(\"getting into if\")\r\n                const first = store.getState().campaigns.filter(camp => camp.id === loadedCamp)\r\n                setNewCampaignData(first[0])\r\n                setLoaded(true)\r\n            }\r\n        }\r\n        setEmailCSV(store.getState().emailList)\r\n    }, [])\r\n\r\n    const options = emailCSV ? emailCSV.map(list =>\r\n        <option key={list.id} value={list.id}>{list.name}</option>\r\n    ) : null;\r\n\r\n\r\n    const camNameRef = useRef(null)\r\n    const SenderNameRef = useRef(null)\r\n    const emailSubRef = useRef(null)\r\n    const SenderEmailRef = useRef(null)\r\n\r\n    console.log(newCampaignData.campName)\r\n\r\n\r\n    const { push } = useHistory(null)\r\n    return (\r\n        <>\r\n            <div className=\"topNavCam  subWrapperCam\">\r\n                <div className=\"createCamp   topButtonsCam subWrapperCam\"\r\n                    onClick={() => push(\"/dashboard\")}\r\n                >\r\n                    Back\r\n                </div>\r\n                {/* <div className=\"addEmailList topButtonsCam subWrapperCam\">\r\n                    <p>Save & Next</p>\r\n                </div> */}\r\n\r\n            </div>\r\n            <div className=\"dashBodyMainCam  subWrapperCam\">\r\n                <div className=\"camFormHolder\">\r\n                    <form className=\"formFields  Fields\">\r\n                        <div className=\"leftFields Fields\">\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"camName\">Campaign Name</label>\r\n                                <input defaultValue={newCampaignData.name} ref={camNameRef} type=\"text\" id=\"camName\" name=\"camName\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, name: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"SenderName\">Sender Name</label>\r\n                                <input defaultValue={newCampaignData.sender_name} ref={SenderNameRef} type=\"text\" id=\"SenderName\" name=\"SenderName\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, sender_name: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"emailSub\">Email Subject</label>\r\n                                <input defaultValue={newCampaignData.email_subject} ref={emailSubRef} type=\"text\" id=\"emailSub\" name=\"camName\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, email_subject: e.target.value })}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"rightFields Fields\">\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"SenderEmail\">Sender Email</label>\r\n                                <input defaultValue={newCampaignData.sender_email} ref={SenderEmailRef} type=\"text\" id=\"SenderEmail\" name=\"SenderEmail\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, sender_email: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            <div className=\"subFieldLong Fields\">\r\n                                <label htmlFor=\"emailList\">Email Attachment</label>\r\n\r\n                                <input type=\"file\" id=\"emailList\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, attachment: e.target.files[0] })}\r\n                                />\r\n                            </div>\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"emailLists\">Email List</label>\r\n                                {console.log(newCampaignData.camp_emails)}\r\n                                <select id=\"camName\" name=\"camName\" value={newCampaignData.camp_emails}\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, camp_emails: e.target.value })}\r\n                                >\r\n                                    {options}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"subFieldLong Fields\">\r\n                                <label htmlFor=\"emailBody\">Email Body</label>\r\n                                <div id=\"emailBody\" className=\"desBody Fields formButtonsCam\"\r\n                                    onClick={() => {\r\n\r\n                                        push(\"/dashboard/loadedcamp/maileditor\")\r\n                                        setTimeout(() => {\r\n                                            loadTheTemplate(newCampaignData.temp_json)\r\n                                        }, 500)\r\n                                    }}\r\n                                >\r\n                                    Deisgn Body\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    <div className=\"formButtons Fields\">\r\n                        <animated.div className=\"sendButton Fields formButtonsCam\"\r\n                            style={upNsendButtonStyle}\r\n                            onClick={() => {\r\n                                setUpNsendButtonStyle({ text: \"Sending...\", backgroundColor: \"#389685ff\" })\r\n                                axios.post(`https://emailengine2020.herokuapp.com/campid/${newCampaignData.id}/`).then(res => {\r\n                                    setTimeout(() => { setUpNsendButtonStyle({ text: \"Sent!\", backgroundColor: \"#656565ff\" }) }, 1000)\r\n                                    setTimeout(() => { push('/dashboard') }, 1300)\r\n                                })\r\n                            }}\r\n                        >\r\n                            {upNsendButtonStyle.text}{/* {update ? \"Update & Send\" : \"Save & Send\"} */}\r\n                        </animated.div>\r\n                        <animated.div className=\"createButton Fields formButtonsCam\"\r\n                            style={upNexitButtonStyle}\r\n                            onClick={() => {\r\n                                setUpNexitButtonStyle({ transform: \"scaleX(1)\", text: \"Updating...\", backgroundColor: \"#389685ff\" })\r\n                                setTimeout(() => {\r\n                                    //console.log(newCampaignData.ht)\r\n                                    let dataForm = new FormData\r\n                                    let Jda = JSON.stringify(newCampaignData.temp_json)\r\n                                    dataForm.append(\"name\", newCampaignData.name)\r\n                                    dataForm.append(\"sender_name\", newCampaignData.sender_name)\r\n                                    dataForm.append(\"sender_email\", newCampaignData.sender_email)\r\n                                    dataForm.append(\"email_subject\", newCampaignData.email_subject)\r\n                                    dataForm.append(\"my_customer\", store.getState().userData.id)\r\n                                    dataForm.append(\"camp_emails\", 6)\r\n                                    dataForm.append(\"email_message\", \"will see\")\r\n                                    dataForm.append(\"temp_json\", Jda)\r\n                                    dataForm.append(\"ht\", newCampaignData.ht)\r\n                                    if (typeof (!newCampaignData.attachment) === 'string') {\r\n                                        dataForm.append(\"attachment\", newCampaignData.attachment)\r\n                                    }\r\n                                    axios.put(`https://emailengine2020.herokuapp.com/camprud/${store.getState().loadedCampaign.campId}/`,\r\n                                        dataForm\r\n                                    ).then(res => {\r\n                                        console.log(res)\r\n                                        console.log(\"reached res\")\r\n\r\n                                        store.dispatch(updateCampaign(store.getState().userData.id))\r\n\r\n                                        setTimeout(() => {\r\n                                            setUpNexitButtonStyle({ text: \"Done!\", backgroundColor: \"#365194ff\" })\r\n\r\n                                        }, 1000)\r\n                                        setTimeout(() => { push('/dashboard') }, 1300)\r\n                                    })\r\n                                        .catch(er => {\r\n                                            console.log(er)\r\n                                            console.log(\"reached er\")\r\n                                            if (er.response) {\r\n                                                //console.log(er.response.data)\r\n                                                // if (er.response.status === 500) {\r\n                                                //     document.getElementsByClassName(\"addEmailList topButtonsCam subWrapperCam\")[0].click()\r\n                                                //     // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => res.data)\r\n                                                // }\r\n                                            }\r\n                                        }\r\n                                        )\r\n\r\n                                }, 0)\r\n                            }}\r\n                        >\r\n                            {upNexitButtonStyle.text}\r\n                        </animated.div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoadedCampForm;"]},"metadata":{},"sourceType":"module"}