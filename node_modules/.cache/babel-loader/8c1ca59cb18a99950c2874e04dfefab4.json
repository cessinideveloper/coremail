{"ast":null,"code":"var _jsxFileName = \"X:\\\\cessini2\\\\src\\\\components\\\\Dashboard\\\\campaignHolder\\\\newCampaign\\\\newCam.js\";\nimport React, { useState, useRef } from 'react';\nimport './newcam.css';\nimport { useFormik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { Route, Switch } from 'react-router-dom';\nimport EmailEditor from 'react-email-editor';\nimport axios from 'axios';\nimport store from '../../../../store/store';\nimport CampForm from './campaignForm';\nimport { addCampaign } from '../../../../actions';\nimport { useSpring, animated } from 'react-spring';\n\nconst NewCam = () => {\n  const [sendButtonStyle, setSendButtonStyle] = useSpring(() => ({\n    transform: \"scaleX(1)\",\n    text: \"Save & Send\",\n    backgroundColor: \"rgb(23, 38, 74)\"\n  }));\n  const [saveNexitButtonStyle, setSaveNexitButtonStyle] = useSpring(() => ({\n    transform: \"scaleX(1)\",\n    text: \"Save & Exit\",\n    backgroundColor: \"rgb(23, 38, 74)\"\n  }));\n  const [newCampaignData, setNewCampaignData] = useState({\n    senderName: \"\",\n    //string\n    senderEmail: \"\",\n    //string\n    campName: \"\",\n    //string\n    emailSub: \"\",\n    //string\n    emailListCVS: 0,\n    //number\n    emailAttachment: null,\n    //null\n    emailBodyJSON: null,\n    //JSONobject\n    emailBodyHTML: null //HTMLobject \n\n  });\n  const {\n    push\n  } = useHistory(null);\n  const emailEditorRef = useRef(null);\n  return /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/dashboard/newcamp/maileditor\",\n    render: () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topNavCam  subWrapperCam\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"createCamp   topButtonsCam subWrapperCam\",\n      onClick: () => push(\"/dashboard/newcamp\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 25\n      }\n    }, \"Back\"), /*#__PURE__*/React.createElement(animated.div, {\n      className: \"topButtonsCam subWrapperCam saveAndsend\",\n      style: sendButtonStyle,\n      onClick: () => {\n        setSendButtonStyle({\n          transform: \"scaleX(1)\",\n          text: \"Sending...\",\n          backgroundColor: \"#ff9f1bff\"\n        });\n        emailEditorRef.current.editor.exportHtml(({\n          design,\n          html\n        }) => {\n          setNewCampaignData({ ...newCampaignData,\n            emailBodyJSON: design,\n            emailBodyHTML: html\n          });\n          setTimeout(() => {\n            let dataForm = new FormData();\n            let Jda = JSON.stringify(newCampaignData.emailBodyJSON);\n            dataForm.append(\"name\", newCampaignData.campName);\n            dataForm.append(\"sender_name\", newCampaignData.senderName);\n            dataForm.append(\"sender_email\", newCampaignData.senderEmail);\n            dataForm.append(\"email_subject\", newCampaignData.emailSub);\n            dataForm.append(\"my_customer\", store.getState().userData.id);\n            dataForm.append(\"camp_emails\", Number(newCampaignData.emailListCVS));\n            dataForm.append(\"email_message\", \"will see\");\n            dataForm.append(\"temp_json\", Jda);\n            dataForm.append(\"ht\", html);\n            dataForm.append(\"attachment\", newCampaignData.emailAttachment); //newCampaignData.emailAttachment)\n\n            axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => {\n              console.log(res.data, res.data.id);\n              store.dispatch(addCampaign());\n              setSendButtonStyle({\n                transform: \"scaleX(1)\",\n                text: \"Done!\",\n                backgroundColor: \"#365194ff\"\n              });\n              setTimeout(() => {\n                push('/dashboard');\n              }, 200); // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", res.data.id)\n            }).catch(er => {\n              if (er.response) {\n                if (er.response.status === 500) {\n                  setSendButtonStyle({\n                    transform: \"scaleX(1)\",\n                    text: \"Wait Trying Again\",\n                    backgroundColor: \"#a42020ff\"\n                  });\n                  document.getElementsByClassName(\"saveAndsend\")[0].click(); // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => res.data)\n                }\n              }\n            });\n          }, 0);\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }\n    }, sendButtonStyle.text), /*#__PURE__*/React.createElement(animated.div, {\n      className: \"topButtonsCam subWrapperCam saveAndExit\",\n      style: saveNexitButtonStyle,\n      onClick: () => {\n        setSaveNexitButtonStyle({\n          transform: \"scaleX(1)\",\n          text: \"Sending...\",\n          backgroundColor: \"#ff9f1bff\"\n        });\n        emailEditorRef.current.editor.exportHtml(({\n          design,\n          html\n        }) => {\n          setNewCampaignData({ ...newCampaignData,\n            emailBodyJSON: design,\n            emailBodyHTML: html\n          });\n          setTimeout(() => {\n            let dataForm = new FormData();\n            let Jda = JSON.stringify(newCampaignData.emailBodyJSON);\n            dataForm.append(\"name\", newCampaignData.campName);\n            dataForm.append(\"sender_name\", newCampaignData.senderName);\n            dataForm.append(\"sender_email\", newCampaignData.senderEmail);\n            dataForm.append(\"email_subject\", newCampaignData.emailSub);\n            dataForm.append(\"my_customer\", store.getState().userData.id);\n            dataForm.append(\"camp_emails\", Number(newCampaignData.emailListCVS));\n            dataForm.append(\"email_message\", \"will see\");\n            dataForm.append(\"temp_json\", Jda);\n            dataForm.append(\"ht\", html);\n            dataForm.append(\"attachment\", newCampaignData.emailAttachment); //newCampaignData.emailAttachment)\n\n            axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => {\n              console.log(res.data);\n              store.dispatch(addCampaign());\n              setSendButtonStyle({\n                transform: \"scaleX(1)\",\n                text: \"Done!\",\n                backgroundColor: \"#365194ff\"\n              });\n              setTimeout(() => {\n                push('/dashboard');\n              }, 200);\n            }).catch(er => {\n              if (er.response) {\n                if (er.response.status === 500) {\n                  alert(er.response.status); //document.getElementsByClassName(\"sendAndExit\")[0].click()\n                  // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => res.data)\n                }\n              }\n            });\n          }, 0);\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }\n    }, saveNexitButtonStyle.text)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dashBodyMain  subWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(EmailEditor, {\n      ref: emailEditorRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 25\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/dashboard/newcamp\",\n    render: () => /*#__PURE__*/React.createElement(CampForm, {\n      newCampaignData: newCampaignData,\n      setNewCampaignData: setNewCampaignData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default NewCam;","map":{"version":3,"sources":["X:/cessini2/src/components/Dashboard/campaignHolder/newCampaign/newCam.js"],"names":["React","useState","useRef","useFormik","useHistory","Route","Switch","EmailEditor","axios","store","CampForm","addCampaign","useSpring","animated","NewCam","sendButtonStyle","setSendButtonStyle","transform","text","backgroundColor","saveNexitButtonStyle","setSaveNexitButtonStyle","newCampaignData","setNewCampaignData","senderName","senderEmail","campName","emailSub","emailListCVS","emailAttachment","emailBodyJSON","emailBodyHTML","push","emailEditorRef","current","editor","exportHtml","design","html","setTimeout","dataForm","FormData","Jda","JSON","stringify","append","getState","userData","id","Number","post","then","res","console","log","data","dispatch","catch","er","response","status","document","getElementsByClassName","click","alert"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './newcam.css'\r\nimport { useFormik } from 'formik'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport EmailEditor from 'react-email-editor'\r\nimport axios from 'axios'\r\nimport store from '../../../../store/store'\r\nimport CampForm from './campaignForm'\r\nimport { addCampaign } from '../../../../actions'\r\nimport { useSpring, animated } from 'react-spring'\r\n\r\nconst NewCam = () => {\r\n    const [sendButtonStyle, setSendButtonStyle] = useSpring(() => ({ transform: \"scaleX(1)\", text: \"Save & Send\", backgroundColor: \"rgb(23, 38, 74)\" }))\r\n    const [saveNexitButtonStyle, setSaveNexitButtonStyle] = useSpring(() => ({ transform: \"scaleX(1)\", text: \"Save & Exit\", backgroundColor: \"rgb(23, 38, 74)\" }))\r\n    const [newCampaignData, setNewCampaignData] = useState({\r\n        senderName: \"\",//string\r\n        senderEmail: \"\",//string\r\n        campName: \"\",//string\r\n        emailSub: \"\",//string\r\n        emailListCVS: 0,//number\r\n        emailAttachment: null,//null\r\n        emailBodyJSON: null,//JSONobject\r\n        emailBodyHTML: null,//HTMLobject \r\n    })\r\n    const { push } = useHistory(null)\r\n    const emailEditorRef = useRef(null);\r\n\r\n    return (\r\n        <Switch>\r\n\r\n            <Route path=\"/dashboard/newcamp/maileditor\" render={() =>\r\n                <>\r\n                    <div className=\"topNavCam  subWrapperCam\">\r\n                        <div className=\"createCamp   topButtonsCam subWrapperCam\"\r\n                            onClick={() => push(\"/dashboard/newcamp\")}\r\n                        >\r\n                            Back\r\n                        </div>\r\n                        <animated.div className=\"topButtonsCam subWrapperCam saveAndsend\"\r\n                            style={sendButtonStyle}\r\n                            onClick={() => {\r\n                                setSendButtonStyle({ transform: \"scaleX(1)\", text: \"Sending...\", backgroundColor: \"#ff9f1bff\" });\r\n                                emailEditorRef.current.editor.exportHtml(({ design, html }) => {\r\n                                    setNewCampaignData({ ...newCampaignData, emailBodyJSON: design, emailBodyHTML: html })\r\n                                    setTimeout(() => {\r\n                                        let dataForm = new FormData\r\n                                        let Jda = JSON.stringify(newCampaignData.emailBodyJSON)\r\n                                        dataForm.append(\"name\", newCampaignData.campName)\r\n                                        dataForm.append(\"sender_name\", newCampaignData.senderName)\r\n                                        dataForm.append(\"sender_email\", newCampaignData.senderEmail)\r\n                                        dataForm.append(\"email_subject\", newCampaignData.emailSub)\r\n                                        dataForm.append(\"my_customer\", store.getState().userData.id)\r\n                                        dataForm.append(\"camp_emails\", Number(newCampaignData.emailListCVS))\r\n                                        dataForm.append(\"email_message\", \"will see\")\r\n                                        dataForm.append(\"temp_json\", Jda)\r\n                                        dataForm.append(\"ht\", html)\r\n                                        dataForm.append(\"attachment\", newCampaignData.emailAttachment)//newCampaignData.emailAttachment)\r\n                                        axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\",\r\n                                            dataForm\r\n                                        ).then(res => {\r\n                                            console.log(res.data, res.data.id)\r\n                                            store.dispatch(addCampaign())\r\n                                            setSendButtonStyle({ transform: \"scaleX(1)\", text: \"Done!\", backgroundColor: \"#365194ff\" });\r\n                                            setTimeout(() => { push('/dashboard') }, 200)\r\n                                            // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", res.data.id)\r\n                                        })\r\n                                            .catch(er => {\r\n                                                if (er.response) {\r\n                                                    if (er.response.status === 500) {\r\n                                                        setSendButtonStyle({ transform: \"scaleX(1)\", text: \"Wait Trying Again\", backgroundColor: \"#a42020ff\" });\r\n                                                        document.getElementsByClassName(\"saveAndsend\")[0].click()\r\n                                                        // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => res.data)\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            )\r\n\r\n                                    }, 0)\r\n\r\n                                })\r\n                            }}\r\n\r\n\r\n                        >\r\n                            {sendButtonStyle.text}\r\n                        </animated.div>\r\n                        <animated.div className=\"topButtonsCam subWrapperCam saveAndExit\"\r\n                            style={saveNexitButtonStyle}\r\n                            onClick={() => {\r\n                                setSaveNexitButtonStyle({ transform: \"scaleX(1)\", text: \"Sending...\", backgroundColor: \"#ff9f1bff\" });\r\n                                emailEditorRef.current.editor.exportHtml(({ design, html }) => {\r\n                                    setNewCampaignData({ ...newCampaignData, emailBodyJSON: design, emailBodyHTML: html })\r\n                                    setTimeout(() => {\r\n                                        let dataForm = new FormData\r\n                                        let Jda = JSON.stringify(newCampaignData.emailBodyJSON)\r\n                                        dataForm.append(\"name\", newCampaignData.campName)\r\n                                        dataForm.append(\"sender_name\", newCampaignData.senderName)\r\n                                        dataForm.append(\"sender_email\", newCampaignData.senderEmail)\r\n                                        dataForm.append(\"email_subject\", newCampaignData.emailSub)\r\n                                        dataForm.append(\"my_customer\", store.getState().userData.id)\r\n                                        dataForm.append(\"camp_emails\", Number(newCampaignData.emailListCVS))\r\n                                        dataForm.append(\"email_message\", \"will see\")\r\n                                        dataForm.append(\"temp_json\", Jda)\r\n                                        dataForm.append(\"ht\", html)\r\n                                        dataForm.append(\"attachment\", newCampaignData.emailAttachment)//newCampaignData.emailAttachment)\r\n                                        axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\",\r\n                                            dataForm\r\n                                        ).then(res => {\r\n                                            console.log(res.data)\r\n                                            store.dispatch(addCampaign())\r\n                                            setSendButtonStyle({ transform: \"scaleX(1)\", text: \"Done!\", backgroundColor: \"#365194ff\" });\r\n                                            setTimeout(() => { push('/dashboard') }, 200)\r\n                                        })\r\n                                            .catch(er => {\r\n                                                if (er.response) {\r\n                                                    if (er.response.status === 500) {\r\n                                                        alert(er.response.status)\r\n                                                        //document.getElementsByClassName(\"sendAndExit\")[0].click()\r\n                                                        // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => res.data)\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            )\r\n\r\n                                    }, 0)\r\n\r\n                                })\r\n                            }\r\n                            }\r\n\r\n                        >\r\n                            {saveNexitButtonStyle.text}\r\n                        </animated.div>\r\n\r\n                    </div>\r\n                    <div className=\"dashBodyMain  subWrapper\">\r\n                        <EmailEditor ref={emailEditorRef}></EmailEditor>\r\n                    </div>\r\n                </>\r\n            }>\r\n            </Route>\r\n            <Route path=\"/dashboard/newcamp\" render={() =>\r\n                <CampForm newCampaignData={newCampaignData}\r\n                    setNewCampaignData={setNewCampaignData}\r\n                ></CampForm>}>\r\n            </Route>\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default NewCam;"]},"metadata":{},"sourceType":"module"}